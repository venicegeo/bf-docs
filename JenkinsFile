#!/usr/bin/groovy

node {
  def root = pwd()
  def mvn = tool 'M3'
  def zapHome = tool 'ZAProxy_v2_5_0'
  def nodejs = tool 'NodeJS_6'

  stage("Config") {
    // clone the configuration repository and copy the current configuration
    def configDir = "${root}/configuration"
    def configFile = "${root}/config.json"
    dir(configDir) {
      git url: "${env.CONFIGURATION_URL}", credentialsId: "${env.CONFIGURATION_CREDS}"
      sh "mv ${configDir}/${ENVIRONMENT}-config.json ${configFile}"
      deleteDir()
    }
    // read the current configuration
    def configJson = readJSON file: "${configFile}"
    for (param in configJson.credparams + configJson.jobparams) {
      env."${param.name}" = (param.type == "booleanParam") ? "${param.defaultvalue}".toBoolean() : "${param.defaultvalue}"
    }
  }

  stage("Setup") {
    deleteDir()

    echo "Cloning source repository..."
    // github is open gitlab requires credentials to clone
    if(env.GITLAB_CREDS) {
      git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}", credentialsId: "${env.GITLAB_CREDS}"
    } else {
      git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}"
    }
  }

  def appvers = sh(script: "git describe --long --tags --always | sed 's/\\./-/'g", returnStdout: true)
  appvers = appvers.trim()
  def appName = "bf-docs-${appvers}"

  stage("Archive") {
  // Build Tarball
    def targetFiles = "Staticfile site manifest.jenkins.yml"
    def tarball = "bf-docs.tar.gz"
    sh "tar cvvzf ${tarball} ${targetFiles}"
    // Check if Exists
    def getDependencyStatus = sh(script: """mvn -X --settings ~/.m2/settings.xml dependency:get \
    -Dmaven.repo.local="${root}/.m2/repository" \
    -DrepositoryId=nexus \
    -DartifactId=bf-docs \
    -Dversion=${appvers} \
    -DgroupId="org.venice.beachfront" \
    -Dpackaging=tar.gz \
    -DremoteRepositories="nexus::default::${env.ARTIFACT_STORAGE_DEPLOY_URL}" \
    """, returnStatus: true)
    echo "dependency status = ${getDependencyStatus}"
    if (getDependencyStatus == 0) {
      echo "Artifact version ${appvers} exists in Nexus, nothing to do"
    } else {
    sh """mvn -X --settings ~/.m2/settings.xml deploy:deploy-file -Dfile=${root}/${tarball} \
      -DrepositoryId=nexus \
      -Durl="${env.ARTIFACT_STORAGE_DEPLOY_URL}" \
      -DgroupId="org.venice.beachfront" \
      -DgeneratePom=false \
      -Dpackaging=tar.gz \
      -Dmaven.repo.local="${root}/.m2/repository" \
      -DartifactId=bf-docs \
      -Dversion=${appvers}
    """
    }
  }
  
  if (!env.SKIP_SCANS.toBoolean()) {
	  stage("Dependency Check") {
      withCredentials([[$class: 'StringBinding', credentialsId: "${env.THREADFIX_API_KEY}", variable: 'THREADFIX_KEY']]) {
        def depHome = tool 'owasp_dependency_check'
        withEnv(["PATH+=${depHome}/bin"]) {
          sh 'dependency-check.sh --project "pz-swagger" --scan "." --format "XML" --enableExperimental --disableBundleAudit'
          sh "/bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@dependency-check-report.xml ${env.THREADFIX_URL}/rest/latest/applications/${env.THREADFIX_ID}/upload?apiKey=${THREADFIX_KEY}"
        }
      }
	  }
  }

  stage ("Int Deploy") {
    if(!fileExists('.cf')) {
      sh "mkdir -p .cf"
    }
    withEnv(['CF_HOME=.cf']) {
      withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.PCF_CREDS}", usernameVariable: 'CFUSER', passwordVariable: 'CFPASS']]) {
        sh "cf api ${env.PCF_API_ENDPOINT}"
        sh "cf auth ${CFUSER} ${CFPASS}"
        sh "cf target -o ${env.PCF_ORG} -s ${env.PHASE_ONE_PCF_SPACE}"
        sh "cf push ${appName} -f manifest.jenkins.yml --no-start -m 512M --no-route"
      	sh "cf set-env ${appName} SPACE ${env.PHASE_ONE_PCF_SPACE}"
      	sh "cf set-env ${appName} DOMAIN ${env.PHASE_ONE_PCF_DOMAIN}"
        try {
          sh "cf start ${appName}"
        } catch (Exception e) {
          //sh "cf logs --recent ${appName}"
          sh "cf delete ${appName} -f -r"
          error("Error during application start. Deleting ${appName} and failing the build.")
        }
	  }
	}
	if(!env.SKIP_SCANS.toBoolean()) {
		withCredentials([[$class: 'StringBinding', credentialsId: "${env.THREADFIX_API_KEY}", variable: 'THREADFIX_KEY']]) {
		  sh "mkdir -p ${root}/zap-out"
		  sh """${zapHome}/zap.sh -cmd \
			-quickout ${root}/zap-out/zap.xml \
			-quickurl https://${appName}.${env.PHASE_ONE_PCF_DOMAIN} \
		  """
		  sh "cat ${root}/zap-out/zap.xml"
		  sh "/bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@${root}/zap-out/zap.xml ${env.THREADFIX_URL}/rest/latest/applications/${THREADFIX_ID}/upload?apiKey=${THREADFIX_KEY}"
		}
	}
    withEnv(['CF_HOME=.cf']) {
      withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.PCF_CREDS}", usernameVariable: 'CFUSER', passwordVariable: 'CFPASS']]) {
        sh "cf api ${env.PCF_API_ENDPOINT}"
        sh "cf auth ${CFUSER} ${CFPASS}"
        sh "cf target -o ${env.PCF_ORG} -s ${env.PHASE_ONE_PCF_SPACE}"
		def legacyAppNames = sh(script: "cf routes | grep \"bf-docs\" | awk '{print \$4}'", returnStdout: true)
		sh "cf map-route ${appName} ${env.PHASE_ONE_PCF_DOMAIN} --hostname bf-docs"
		// Remove Legacy applications
		for (Object legacyApp : legacyAppNames.trim().tokenize(',')) {
		  def legacyAppName = legacyApp.toString().trim()
		  if (legacyAppName != appName) {
		    sh "cf unmap-route ${legacyAppName} ${env.PHASE_ONE_PCF_DOMAIN} --hostname bf-docs"
		    sh "cf delete -f ${legacyAppName} -r"
		  }
		}
	  }
	}
  }

  if(env.DEPLOY_PHASE_TWO.toBoolean()) {
	  stage('Stage Deploy') {
		if(!fileExists('.cf')) {
		  sh "mkdir -p .cf"
		}
		withEnv(['CF_HOME=.cf']) {
		  withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.PCF_CREDS}", usernameVariable: 'CFUSER', passwordVariable: 'CFPASS']]) {
			sh "cf api ${env.PCF_API_ENDPOINT}"
			sh "cf auth ${CFUSER} ${CFPASS}"
			sh "cf target -o ${env.PCF_ORG} -s ${env.PHASE_TWO_PCF_SPACE}"
			sh "cf push ${appName}-f manifest.jenkins.yml --no-start -m 512M --no-route"
			sh "cf set-env ${appName} SPACE ${env.PHASE_TWO_PCF_SPACE}"
			sh "cf set-env ${appName} DOMAIN ${env.PHASE_TWO_PCF_DOMAIN}"
                        try {
                          sh "cf start ${appName}"
                        } catch (Exception e) {
                          //sh "cf logs --recent ${appName}"
                          sh "cf delete ${appName} -f -r"
                          error("Error during application start. Deleting ${appName} and failing the build.")
                        }
		  }
		}
		if(!env.SKIP_SCANS.toBoolean()) {
			withCredentials([[$class: 'StringBinding', credentialsId: "${env.THREADFIX_API_KEY}", variable: 'THREADFIX_KEY']]) {
			  sh "mkdir -p ${root}/zap-out"
			  sh """${zapHome}/zap.sh -cmd \
				-quickout ${root}/zap-out/zap.xml \
				-quickurl https://${appName}.${env.PHASE_TWO_PCF_DOMAIN} \
			  """
			  sh "cat ${root}/zap-out/zap.xml"
			  sh "/bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@${root}/zap-out/zap.xml ${env.THREADFIX_URL}/rest/latest/applications/${THREADFIX_ID}/upload?apiKey=${THREADFIX_KEY}"
			}
		}
		withEnv(['CF_HOME=.cf']) {
		  withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.PCF_CREDS}", usernameVariable: 'CFUSER', passwordVariable: 'CFPASS']]) {
			sh "cf api ${env.PCF_API_ENDPOINT}"
			sh "cf auth ${CFUSER} ${CFPASS}"
			sh "cf target -o ${env.PCF_ORG} -s ${env.PHASE_TWO_PCF_SPACE}"
			def legacyAppNames = sh(script: "cf routes | grep \"bf-docs\" | awk '{print \$4}'", returnStdout: true)
			sh "cf map-route ${appName} ${env.PHASE_TWO_PCF_DOMAIN} --hostname bf-docs"
		    // Remove Legacy applications
		    for (Object legacyApp : legacyAppNames.trim().tokenize(',')) {
		      def legacyAppName = legacyApp.toString().trim()
			  if (legacyAppName != appName) {
			    sh "cf unmap-route ${legacyAppName} ${env.PHASE_TWO_PCF_DOMAIN} --hostname bf-docs"
		            sh "cf delete -f ${legacyAppName} -r"
			  }
		    }
		  }
		}
	  }
  }


}
